# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/github-workflow.json

name: Publish

on:
  push:
    branches:
      - master

env:
  # Disable the .NET logo in the console output.
  DOTNET_NOLOGO: true
  # Disable the .NET first time experience to skip caching NuGet packages and speed up the build.
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending .NET CLI telemetry to Microsoft.
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-module:
    name: Build for distribution
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        uses: butr/actions-common-setup@v2.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}

      - name: Build Bannerlord.IronPython
      run: |
        $impl = $PWD.Path + '/bannerlord-implementations';
        $path = $PWD.Path + '/bannerlord';
        $final = $path + '/Modules/Bannerlord.IronPython/bin/Win64_Shipping_Client/';
        $proj = 'src/Bannerlord.IronPython.Implementation/Bannerlord.IronPython.Implementation.csproj';
        $pdll = $path + '/Modules/Bannerlord.IronPython/bin/Win64_Shipping_Client/Bannerlord.IronPython.Implementation.*.dll';
        $ppdb = $path + '/Modules/Bannerlord.IronPython/bin/Win64_Shipping_Client/Bannerlord.IronPython.Implementation.*.pdb';
        # The folders are required to be created before executing the script
        New-Item -ItemType directory -Force -Path $impl;
        New-Item -ItemType directory -Force -Path $path;
        [string[]]$gameversions = Get-Content -Path supported-game-versions.txt;
        # Last entry is the Minimal version. We will use Bannerlord.IronPython.dll from there
        For ($i = 0; $i -le $gameversions.Length - 1; $i++)
        {
            $gameversion = $gameversions[$i];
            $version = $gameversion.substring(1);
            $constgameversion = $gameversion.replace(".", "");
            dotnet clean $proj --configuration Release;
            dotnet build $proj --configuration Release -p:OverrideGameVersion=$gameversion -p:GameFolder="$path" -p:GameVersionConstant="$constgameversion";
            # Copy Implementations to the Implementations folder
            Copy-Item $pdll $impl/;
            Copy-Item $ppdb $impl/;
        }
        # Copy Implementations to the Module
        Copy-Item $impl/* $final;
        # Delete Implementations folder
        Remove-Item -Recurse $impl;
      shell: pwsh
      env:
        BANNERLORD_BUTR_UPLOAD_URL: ${{secrets.BANNERLORD_BUTR_UPLOAD_URL}}

      - name: Upload Bannerlord folder
        uses: actions/upload-artifact@v3
        with:
          name: bannerlord
          path: ./bannerlord/
  
  ###########################
  #         GITHUB          #
  ###########################
  publish-on-github:
    name: Publish on GitHub
    runs-on: ubuntu-latest
    needs: ["build-module"]
    steps:
      - name: Setup
        uses: butr/actions-common-setup@v2.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}

      - name: Download bannerlord folder
        uses: actions/download-artifact@v3
        with:
          name: bannerlord
          path: ./bannerlord

      - name: Zip Bannerlord.IronPython
        run: 7z a -t7z Bannerlord.IronPython.7z ./bannerlord/* -mx9
        #shell: pwsh
        # pwsh casues it to include the root folder

      - name: Install Bannerlord.ChangelogParser
        run: >-
          dotnet tool install -g Bannerlord.ChangelogParser;
        shell: pwsh

      - name: Run ChangelogParser
        id: changelog
        run: |
          vers="$(bannerlord_changelog_parser latestversion -f "$PWD/changelog.txt")"
          echo "::set-output name=mod_version::$vers"
          desc="$(bannerlord_changelog_parser fulldescription -f "$PWD/changelog.txt")"
          desc="${desc//'%'/'%25'}"
          desc="${desc//$'\n'/'%0A'}"
          desc="${desc//$'\r'/'%0D'}"
          echo "::set-output name=mod_description::$desc"
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: v${{steps.changelog.outputs.mod_version}}
          release_name: Release ${{steps.changelog.outputs.mod_version}}
          body: ${{steps.changelog.outputs.mod_description}}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: ./Bannerlord.IronPython.7z
          asset_name: Bannerlord.IronPython.7z
          asset_content_type: application/x-7z-compressed
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}